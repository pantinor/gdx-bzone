package bzone;

import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.VertexAttributes;
import com.badlogic.gdx.graphics.g3d.Material;
import com.badlogic.gdx.graphics.g3d.Model;
import com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute;
import com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder;
import com.badlogic.gdx.graphics.g3d.utils.ModelBuilder;
import com.badlogic.gdx.math.Vector3;
import java.util.ArrayList;
import java.util.List;

public class Models {

    private static final Vector3 TMP1 = new Vector3();
    private static final Vector3 TMP2 = new Vector3();
    private static final Vector3 TMP3 = new Vector3();
    private static final Vector3 TMP4 = new Vector3();
    private static final Vector3 TMP5 = new Vector3();
    private static final Vector3 TMP6 = new Vector3();

    public static enum Mesh {
        //original bzone meshes from ROM
        NARROW_PYRAMID("W1 V 6 512 -640 -512 -512 -640 -512 -512 -640 512 512 -640 512 0 640 0 0 0 0 E 8 0 4 4 1 1 0 0 3 3 4 4 2 2 3 2 1 P 0"),
        TALL_BOX("W1 V 9 512 -640 -512 -512 -640 -512 -512 -640 512 512 -640 512 512 640 -512 -512 640 -512 -512 640 512 512 640 512 0 0 0 E 12 0 1 1 2 2 3 3 0 0 4 4 5 5 6 6 7 7 4 5 1 2 6 7 3 P 0"),
        SLOW_TANK("W1 V 25 512 -640 -736 -512 -640 -736 -512 -640 968 512 -640 968 568 -416 -1024 -568 -416 -1024 -568 -416 1248 568 -416 1248 344 -240 -680 -344 -240 -680 -344 -240 680 344 -240 680 168 96 -512 -168 96 -512 40 -16 -128 -40 -16 -128 -40 -96 128 40 -96 128 -40 -16 1120 -40 -96 1120 40 -16 1120 40 -96 1120 0 96 -512 0 160 -512 0 0 0 E 38 23 22 12 13 14 20 20 18 18 15 15 14 14 17 17 16 16 19 19 21 21 17 15 16 19 18 20 21 3 0 0 4 4 7 7 6 6 2 2 3 3 7 7 11 11 10 10 6 6 5 5 9 9 10 10 13 13 9 9 8 8 11 11 12 12 8 8 4 4 5 5 1 1 2 1 0 P 0"),
        PROJECTILE("W1 V 6 40 -96 -40 40 -16 -40 -40 -16 -40 -40 -96 -40 0 -56 80 0 0 0 E 8 0 4 4 1 1 0 0 3 3 4 4 2 2 3 2 1 P 0"),
        REAR_TREAD_0("W1 V 7 552 -472 -948 -552 -472 -948 536 -552 -844 -536 -552 -844 516 -632 -736 -516 -632 -736 0 0 0 E 3 0 1 2 3 4 5 P 0"),
        REAR_TREAD_1("W1 V 7 556 -456 -972 -556 -456 -972 540 -536 -868 -540 -536 -868 520 -616 -764 -520 -616 -764 0 0 0 E 3 0 1 2 3 4 5 P 0"),
        REAR_TREAD_2("W1 V 7 564 -432 -1000 -564 -432 -1000 544 -512 -896 -544 -512 -896 528 -592 -792 -528 -592 -792 0 0 0 E 3 0 1 2 3 4 5 P 0"),
        REAR_TREAD_3("W1 V 7 568 -416 -1024 -568 -416 -1024 548 -496 -920 -548 -496 -920 532 -576 -816 -532 -576 -816 0 0 0 E 3 0 1 2 3 4 5 P 0"),
        FRONT_TREAD_0("W1 V 7 568 -416 1248 -568 -416 1248 548 -496 1152 -548 -496 1152 532 -576 1056 -532 -576 1056 0 0 0 E 3 0 1 2 3 4 5 P 0"),
        FRONT_TREAD_1("W1 V 7 564 -432 1224 -564 -432 1224 544 -512 1128 -544 -512 1128 528 -592 1032 -528 -592 1032 0 0 0 E 3 0 1 2 3 4 5 P 0"),
        FRONT_TREAD_2("W1 V 7 556 -456 1200 -556 -456 1200 540 -536 1104 -540 -536 1104 520 -616 1008 -520 -616 1008 0 0 0 E 3 0 1 2 3 4 5 P 0"),
        FRONT_TREAD_3("W1 V 7 552 -472 1176 -552 -472 1176 536 -552 1080 -536 -552 1080 516 -632 984 -516 -632 984 0 0 0 E 3 0 1 2 3 4 5 P 0"),
        WIDE_PYRAMID("W1 V 6 800 -640 -800 -800 -640 -800 -800 -640 800 800 -640 800 0 800 0 0 0 0 E 8 0 4 4 1 1 0 0 3 3 4 4 2 2 3 2 1 P 0"),
        RADAR1("W1 V 9 80 160 0 160 200 80 160 240 80 80 280 0 -80 160 0 -160 200 80 -160 240 80 -80 280 0 0 0 0 E 10 0 1 1 2 2 3 3 0 0 4 4 5 5 6 6 7 7 4 7 3 P 0"),
        PROJECTILE_EXPLOSION("W1 V 2 0 0 0 0 0 0 E 0 P 0"),
        SHORT_BOX("W1 V 9 640 -640 -640 -640 -640 -640 -640 -640 640 640 -640 640 640 -80 -640 -640 -80 -640 -640 -80 640 640 -80 640 0 0 0 E 12 0 1 1 2 2 3 3 0 0 4 4 5 5 6 6 7 7 4 5 1 2 6 7 3 P 0"),
        CHUNK0_TANK_10("W1 V 7 0 -544 220 80 -376 -320 -80 -192 340 0 -712 -184 80 -512 -124 -80 -416 -116 0 0 0 E 10 0 3 3 5 5 2 2 0 0 1 1 2 2 5 5 4 4 1 4 3 P 0"),
        CHUNK1_TANK_11("W1 V 9 120 -640 -240 -64 -560 -376 -160 -768 720 120 -640 640 64 -160 -40 -32 -120 0 160 -400 56 -200 -480 120 0 0 0 E 12 0 1 1 2 2 3 3 0 0 4 4 6 6 7 7 5 5 4 5 1 7 2 3 6 P 0"),
        CHUNK2_TANK("W1 V 15 344 -296 -588 -344 -296 -588 -344 -976 588 344 -976 588 168 -96 -272 -168 -96 -272 40 -376 0 -40 -376 0 -40 -576 180 40 -576 180 -40 -1000 1080 -40 -1072 1040 40 -1000 1080 40 -1072 1040 0 0 0 E 21 0 1 1 2 2 3 3 0 0 4 4 5 5 1 5 2 3 4 6 12 12 10 10 7 7 6 6 9 9 8 8 11 11 13 13 9 7 8 11 10 12 13 P 0"),
        RADAR2("W1 V 9 80 160 0 160 200 80 160 240 80 80 280 0 -80 160 0 -160 200 80 -160 240 80 -80 280 0 0 0 0 E 10 0 1 1 2 2 3 3 0 0 4 4 5 5 6 6 7 7 4 7 3 P 0"),
        CHUNK1_TANK_14("W1 V 9 120 -640 -240 -64 -560 -376 -160 -768 720 120 -640 640 64 -160 -40 -32 -120 0 160 -400 56 -200 -480 120 0 0 0 E 12 0 1 1 2 2 3 3 0 0 4 4 6 6 7 7 5 5 4 5 1 7 2 3 6 P 0"),
        CHUNK0_TANK_15("W1 V 7 0 -544 220 80 -376 -320 -80 -192 340 0 -712 -184 80 -512 -124 -80 -416 -116 0 0 0 E 10 0 3 3 5 5 2 2 0 0 1 1 2 2 5 5 4 4 1 4 3 P 0"),
        MISSILE("W1 V 27 -144 0 -384 -72 96 -384 72 96 -384 144 0 -384 72 -96 -384 -72 -96 -384 -288 0 -96 -192 192 -96 192 192 -96 288 0 -96 192 -192 -96 -192 -192 -96 0 0 1152 0 0 1392 144 -336 -144 -144 -336 -144 -144 -336 144 144 -336 144 48 -184 -48 -48 -184 -48 -48 -168 48 48 -168 48 0 192 -96 -72 96 528 72 96 528 0 288 48 0 0 0 E 43 13 12 12 6 6 0 0 1 1 7 7 8 8 9 9 10 10 11 11 6 6 7 7 12 12 8 8 2 2 3 3 9 9 12 12 10 10 4 4 5 5 11 11 12 24 23 23 22 22 24 24 25 25 23 25 22 1 2 3 4 5 0 18 19 19 20 20 21 21 18 18 14 14 15 15 16 16 17 17 14 15 19 20 16 17 21 P 0"),
        LOGO_BA("W1 V 21 -5120 64 224 -3840 64 224 -3200 176 672 -3520 288 1120 -3200 400 1600 -3840 512 2048 -5120 512 2048 -4480 176 672 -4160 176 672 -4480 288 1120 -4160 400 1600 -4480 400 1600 -3200 64 224 -2240 176 32 -1280 64 224 -2240 512 2048 -2560 224 896 -2240 256 1024 -1920 224 896 -2240 336 1344 0 0 0 E 20 0 1 1 2 2 3 3 4 4 5 5 6 6 0 7 8 8 9 9 10 10 11 11 7 12 13 13 14 14 15 15 12 16 17 17 18 18 19 19 16 P 0"),
        CHUNK1_MISSILE("W1 V 9 120 -640 -240 -64 -560 -376 -160 -768 720 120 -640 640 64 -160 -40 -32 -120 0 160 -400 56 -200 -480 120 0 0 0 E 12 0 1 1 2 2 3 3 0 0 4 4 6 6 7 7 5 5 4 5 1 7 2 3 6 P 0"),
        CHUNK4_MISSILE_19("W1 V 9 72 -368 -300 168 -368 -232 272 -472 -232 272 -568 -300 -168 -408 -96 -12 -384 40 260 -648 40 232 -808 -96 0 0 0 E 10 1 2 2 3 3 7 7 6 6 5 5 4 4 0 0 1 1 5 6 2 P 0"),
        CHUNK0_MISSILE_1A("W1 V 7 0 -544 220 80 -376 -320 -80 -192 340 0 -712 -184 80 -512 -124 -80 -416 -116 0 0 0 E 10 0 3 3 5 5 2 2 0 0 1 1 2 2 5 5 4 4 1 4 3 P 0"),
        CHUNK5_MISSILE("W1 V 5 12 -576 -80 -112 -864 472 44 24 800 16 -536 88 0 0 0 E 6 0 2 2 1 1 3 3 0 0 1 2 3 P 0"),
        CHUNK0_MISSILE_1C("W1 V 7 0 -544 220 80 -376 -320 -80 -192 340 0 -712 -184 80 -512 -124 -80 -416 -116 0 0 0 E 10 0 3 3 5 5 2 2 0 0 1 1 2 2 5 5 4 4 1 4 3 P 0"),
        CHUNK4_MISSILE_1D("W1 V 9 72 -368 -300 168 -368 -232 272 -472 -232 272 -568 -300 -168 -408 -96 -12 -384 40 260 -648 40 232 -808 -96 0 0 0 E 10 1 2 2 3 3 7 7 6 6 5 5 4 4 0 0 1 1 5 6 2 P 0"),
        LOGO_TTLE("W1 V 22 -640 64 224 -320 400 1600 640 400 1600 960 64 224 1280 400 1600 2240 400 1600 2240 64 224 3840 64 224 5440 112 448 4480 176 672 4480 224 896 5120 288 1120 4480 336 1344 4480 400 1600 5440 448 1824 3840 512 2048 2880 176 672 2880 512 2048 -1920 512 2048 -1920 400 1600 -960 400 1600 0 0 0 E 22 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11 11 12 12 13 13 14 14 15 15 7 7 16 16 17 17 18 18 19 19 20 20 0 P 0"),
        LOGO_ZONE("W1 V 26 -4800 -512 -2048 -2240 -512 -2048 -3520 -400 -1600 -2240 -64 -224 -4800 -64 -224 -3520 -176 -672 -320 -512 -2048 -320 -64 -224 -1600 -400 -1600 -960 -400 -1600 -960 -176 -672 -1600 -176 -672 0 -512 -2048 640 -288 -1120 2560 -512 -2048 4160 -448 -1824 3200 -400 -1600 3200 -336 -1344 3840 -288 -1120 3200 -224 -896 3200 -176 -672 4160 -112 -448 2560 -64 -224 1920 -288 -1120 0 -64 -224 0 0 0 E 28 1 0 0 5 5 4 4 3 3 2 2 1 1 3 3 7 7 6 6 1 9 8 8 11 11 10 10 9 14 22 22 23 23 24 24 12 12 13 13 14 14 15 15 16 16 17 17 18 18 19 19 20 20 21 21 22 P 0"),
        SAUCER("W1 V 18 0 -80 -240 -160 -80 -160 -240 -80 0 -160 -80 160 0 -80 240 160 -80 160 240 -80 0 160 -80 -160 0 160 -960 -680 160 -680 -960 160 0 -680 160 680 0 160 960 680 160 680 960 160 0 680 160 -680 0 560 0 0 0 0 E 32 16 8 8 9 9 16 16 10 10 11 11 16 16 12 12 13 13 16 16 14 14 15 15 16 0 7 7 15 15 8 8 0 0 1 1 9 9 10 10 2 2 3 3 11 11 12 12 4 4 5 5 13 13 14 14 6 6 7 6 5 4 3 2 1 P 0"),
        SUPER_TANK("W1 V 26 -368 -640 1456 -552 -640 -456 552 -640 -456 368 -640 1456 -456 -184 -456 456 -184 -456 0 -552 1096 -272 -232 -272 -272 -184 -456 272 -184 -456 272 -232 -272 -184 88 -272 -184 88 -456 184 88 -456 184 88 -272 -88 -88 1280 -88 -88 88 88 -88 88 88 -88 1280 -88 0 1280 -88 0 -88 88 0 -88 88 0 1280 0 88 -456 0 552 -456 0 0 0 E 34 0 1 1 4 4 0 0 3 3 2 2 5 5 3 2 1 4 5 9 10 10 6 6 14 14 13 13 9 9 8 8 7 7 6 6 11 11 12 12 8 12 13 14 11 19 22 22 21 21 20 20 16 16 15 15 18 18 17 17 16 15 19 22 18 17 21 23 24 P 0"),
        SPATTER_0("W1 V 9 -52 -360 0 -36 -360 36 0 -360 52 36 -360 36 52 -360 0 36 -360 -36 0 -360 -52 -36 -360 -36 0 0 0 E 0 P 8 0 1 2 3 4 5 6 7"),
        SPATTER_1("W1 V 9 -100 -400 0 -72 -400 72 0 -400 100 72 -400 72 100 -400 0 72 -400 -72 0 -400 -100 -72 -400 -72 0 0 0 E 0 P 8 0 1 2 3 4 5 6 7"),
        SPATTER_2("W1 V 9 -152 -440 0 -108 -440 108 0 -440 152 108 -440 108 152 -440 0 108 -440 -108 0 -440 -152 -108 -440 -108 0 0 0 E 0 P 8 0 1 2 3 4 5 6 7"),
        SPATTER_3("W1 V 9 -200 -480 0 -144 -480 144 0 -480 200 144 -480 144 200 -480 0 144 -480 -144 0 -480 -200 -144 -480 -144 0 0 0 E 0 P 8 0 1 2 3 4 5 6 7"),
        SPATTER_4("W1 V 9 -252 -520 0 -176 -520 176 0 -520 252 176 -520 176 252 -520 0 176 -520 -176 0 -520 -252 -176 -520 -176 0 0 0 E 0 P 8 0 1 2 3 4 5 6 7"),
        SPATTER_5("W1 V 9 -300 -560 0 -212 -560 212 0 -560 300 212 -560 212 300 -560 0 212 -560 -212 0 -560 -300 -212 -560 -212 0 0 0 E 0 P 8 0 1 2 3 4 5 6 7"),
        SPATTER_6("W1 V 9 -352 -600 0 -264 -600 264 0 -600 352 264 -600 264 352 -600 0 264 -600 -264 0 -600 -352 -264 -600 -264 0 0 0 E 0 P 8 0 1 2 3 4 5 6 7"),
        SPATTER_7("W1 V 9 -400 -640 0 -284 -640 284 0 -640 400 284 -640 284 400 -640 0 284 -640 -284 0 -640 -400 -284 -640 -284 0 0 0 E 0 P 8 0 1 2 3 4 5 6 7"),
        //original stellar 7 meshes from ROM
        LASER_PROJECTILE("W1 V 12 0 64 2000 0 -64 2000 0 64 1040 0 -64 1040 0 64 480 0 -64 480 0 64 -480 0 -64 -480 0 64 -1040 0 -64 -1040 0 64 -2000 0 -64 -2000 E 6 0 2 1 3 4 6 5 7 8 10 9 11 P 0"),
        HEAVY_CANNON_PROJECTILE("W1 V 5 0 480 -720 0 -480 -720 724 0 -724 -724 0 -724 0 0 960 E 8 0 2 2 1 1 3 3 0 4 0 4 1 4 2 4 3 P 0"),
        GIR_DRAXON("W1 V 29 641 -640 1199 -641 -640 1199 -1023 -640 -1452 1023 -640 -1452 810 -400 1828 -810 -400 1828 -1191 -400 -1606 1191 -400 -1606 -812 -80 -1434 812 -80 -1434 625 -304 1043 -625 -304 1043 -643 -80 -1360 643 -80 -1360 -482 480 -958 482 480 -958 0 176 -208 0 -64 464 288 64 173 -288 64 173 0 176 1984 0 -64 1984 293 64 1978 -293 64 1978 0 -80 -1440 0 640 -1440 0 960 -1440 0 960 -2000 0 640 -2000 E 43 0 1 1 2 2 3 3 0 4 5 5 6 6 7 7 4 5 8 8 9 9 4 0 4 1 5 2 6 3 7 6 8 7 9 10 11 11 12 13 10 11 14 14 15 15 10 12 14 13 15 16 19 19 17 17 18 18 16 20 23 23 21 21 22 22 20 16 20 17 21 18 22 19 23 24 26 26 27 27 28 28 25 25 27 26 28 P 0"),
        WARP_LINK("W1 V 14 0 1920 0 0 -1600 0 283 480 283 283 -160 283 -283 480 283 -283 -160 283 -283 480 -283 -283 -160 -283 283 480 -283 283 -160 -283 1278 160 1278 -1278 160 1278 -1278 160 -1278 1278 160 -1278 E 28 0 2 0 4 0 6 0 8 1 3 1 5 1 7 1 9 2 4 4 6 6 8 2 8 3 5 5 7 7 9 9 3 10 11 11 12 12 13 13 10 2 10 4 11 6 12 8 13 3 10 5 11 7 12 9 13 P 0"),
        FUEL_BAY("W1 V 13 1414 640 1414 1414 -960 1414 -1414 640 1414 -1414 -960 1414 -1414 640 -1414 -1414 -960 -1414 1414 640 -1414 1414 -960 -1414 679 -480 679 -679 -480 679 -679 -480 -679 679 -480 -679 0 2000 0 E 24 0 2 2 4 4 6 6 0 1 3 3 5 5 7 7 1 0 8 1 8 2 9 3 9 4 10 5 10 6 11 7 11 8 9 9 10 10 11 11 8 0 12 2 12 4 12 6 12 P 0"),
        OBSTACLE("W1 V 8 1199 1440 1199 1199 -960 1199 -1199 1440 1199 -1199 -960 1199 1199 1440 -1199 1199 -960 -1199 -1199 1440 -1199 -1199 -960 -1199 E 12 0 1 2 3 4 5 6 7 0 2 4 6 1 3 5 7 0 4 2 6 1 5 3 7 P 0"),
        SEEKER("W1 V 18 407 224 407 407 -224 407 -407 224 407 -407 -224 407 -407 224 -407 -407 -224 -407 407 224 -407 407 -224 -407 815 640 815 815 -640 815 -815 640 815 -815 -640 815 -815 640 -815 -815 -640 -815 815 640 -815 815 -640 -815 0 608 0 0 -608 0 E 28 0 1 2 3 4 5 6 7 0 2 2 4 4 6 6 0 1 3 3 5 5 7 7 1 0 8 1 9 2 10 3 11 4 12 5 13 6 14 7 15 0 16 2 16 4 16 6 16 1 17 3 17 5 17 7 17 P 0"),
        STINGER("W1 V 9 0 -240 2000 0 -400 -1440 -571 160 -1597 571 160 -1597 -1250 160 -1602 1250 160 -1602 -320 0 0 320 0 0 0 560 -1280 E 13 0 1 0 2 0 3 1 3 4 5 6 7 2 8 3 8 6 8 7 8 1 2 4 6 5 7 P 0"),
        SKIMMER("W1 V 13 125 -192 1274 125 -272 1274 -125 -192 1274 -125 -272 1274 402 -272 -635 -402 -272 -635 0 -32 -400 1045 176 155 1043 176 -625 1929 -80 -637 -1045 176 155 -1043 176 -625 -1929 -80 -637 E 21 0 1 2 3 0 2 1 3 1 4 3 5 0 6 4 5 4 6 1 7 4 8 7 8 7 9 8 9 3 10 5 11 10 11 10 12 11 12 2 6 6 5 P 0"),
        PULSAR("W1 V 12 1440 -320 0 0 -320 1440 -1440 -320 0 0 -320 -1440 2000 -320 0 0 -320 2000 -2000 -320 0 0 -320 -2000 0 800 0 0 480 0 0 -960 0 0 -1280 0 E 18 0 1 1 2 2 3 3 0 0 4 1 5 2 6 3 7 9 0 9 1 9 2 9 3 10 0 10 1 10 2 10 3 8 9 10 11 P 0"),
        GUN_BATTERY("W1 V 17 0 208 2000 0 -48 2000 296 80 1994 -296 80 1994 0 208 -384 0 -48 -384 286 80 -386 -286 80 -386 961 80 -1115 0 80 -2000 -961 80 -1115 0 1072 -1120 0 720 -1120 0 -560 -1120 0 -912 -1120 1596 80 -1124 -1596 80 -1124 E 28 0 2 2 1 1 3 3 0 4 6 6 5 5 7 7 4 0 4 2 6 3 7 1 5 6 8 8 9 9 10 10 7 12 4 12 8 12 9 12 10 13 5 13 8 13 9 13 10 11 12 13 14 15 8 16 10 P 0"),
        LASER_BATTERY("W1 V 14 0 -80 1920 0 32 -1440 0 -352 -1440 178 -64 -1445 178 -256 -1445 -178 -64 -1445 -178 -256 -1445 0 -160 -1920 0 800 -960 0 -1120 -960 962 320 -962 962 -640 -962 -962 320 -962 -962 -640 -962 E 30 1 3 3 4 4 2 2 6 6 5 5 1 0 1 0 2 0 3 0 4 0 5 0 6 7 1 7 2 7 3 7 4 7 5 7 6 8 10 10 11 11 9 9 13 13 12 12 8 1 8 2 9 3 10 4 11 5 12 6 13 P 0"),
        STALKER("W1 V 20 641 -640 1199 -641 -640 1199 -1023 -640 -1452 1023 -640 -1452 810 -400 1828 -810 -400 1828 -1191 -400 -1606 1191 -400 -1606 -812 -80 -1434 812 -80 -1434 625 -304 1043 -625 -304 1043 -643 -80 -1360 643 -80 -1360 -451 480 -955 451 480 -955 0 288 -400 287 0 301 -287 0 301 0 96 2000 E 31 0 1 1 2 2 3 3 0 4 5 5 6 6 7 7 4 5 8 8 9 9 4 0 4 1 5 2 6 3 7 6 8 7 9 10 11 11 12 13 10 11 14 14 15 15 10 12 14 13 15 16 18 17 16 16 19 17 19 18 19 17 18 P 0"),
        HEAVY_TANK("W1 V 22 726 -960 1281 -726 -960 1281 -727 -960 -1443 727 -960 -1443 943 -480 1764 -943 -480 1764 -943 -480 -1764 943 -480 -1764 -720 -192 218 720 -192 218 635 400 -402 -635 400 -402 -640 400 -1272 640 400 -1272 192 192 -192 189 -64 33 -192 192 -192 -189 -64 33 -196 192 1990 -196 -64 1990 196 192 1990 196 -64 1990 E 37 0 1 1 2 2 3 3 0 4 5 5 6 6 7 7 4 0 4 1 5 2 6 3 7 5 8 8 6 8 9 9 7 9 4 9 10 8 11 6 12 7 13 10 11 11 12 12 13 13 10 14 15 16 17 18 19 20 21 14 16 16 18 18 20 20 14 15 17 17 19 19 21 21 15 P 0"),
        PROWLER("W1 V 20 -637 -960 607 637 -960 607 642 -960 -1448 -642 -960 -1448 -886 -400 1135 886 -400 1135 899 -400 -1786 -899 -400 -1786 -571 320 -1287 571 320 -1287 -190 48 1927 -190 -144 1927 190 48 1927 190 -144 1927 -161 48 -418 -163 -144 257 161 48 -418 163 -144 257 249 96 -1435 249 1280 -1435 E 30 0 1 1 2 2 3 3 0 4 5 5 6 6 7 7 4 8 9 0 4 1 5 2 6 3 7 4 8 7 8 5 9 6 9 10 11 12 13 14 15 16 17 10 12 11 13 14 16 15 17 10 14 12 16 11 15 13 17 18 19 P 0"),
        HOVER_CRAFT("W1 V 21 0 -480 1120 -960 -480 0 0 -480 -1280 960 -480 0 0 -720 800 -640 -240 0 -640 -720 0 0 -240 -960 0 -720 -960 640 -240 0 640 -720 0 -165 240 399 165 240 399 71 -80 717 58 -160 782 -71 -80 717 -58 -160 782 79 -80 1598 79 -160 1598 -79 -80 1598 -79 -160 1598 E 35 0 1 1 2 2 3 3 0 4 6 6 8 8 10 10 4 5 7 7 9 9 5 11 12 0 4 1 6 2 8 3 10 1 5 2 7 3 9 5 11 9 12 0 11 0 12 13 17 15 19 14 18 16 20 17 19 18 20 17 18 19 20 13 15 14 16 13 14 15 16 P 0"),
        SAND_SLED("W1 V 17 726 -960 1881 424 -960 1889 -726 -960 1881 -424 -960 1889 708 -960 -1836 414 -960 -1842 -708 -960 -1836 -414 -960 -1842 571 -800 -1597 -571 -800 -1597 -562 -800 396 562 -800 396 0 80 -1200 0 -288 -560 0 -352 1040 163 -448 -257 -163 -448 -257 E 22 0 1 2 3 4 5 6 7 0 4 1 5 2 6 3 7 8 9 9 10 10 11 11 8 8 12 9 12 10 12 11 12 13 14 13 15 13 16 15 16 14 15 14 16 P 0"),
        LASER_TANK("W1 V 20 953 -960 1285 -953 -960 1285 -953 -960 -1285 953 -960 -1285 1191 -480 1606 -1191 -480 1606 -1191 -480 -1606 1191 -480 -1606 807 -240 630 -807 -240 630 -792 -240 -965 792 -240 -965 398 320 239 -398 320 239 -402 320 -710 402 320 -710 0 48 2000 0 160 352 256 -64 480 -256 -64 480 E 34 0 1 1 2 2 3 3 0 4 5 5 6 6 7 7 4 8 9 9 10 10 11 11 8 12 13 13 14 14 15 15 12 0 4 1 5 2 6 3 7 4 8 5 9 6 10 7 11 8 12 9 13 10 14 11 15 16 17 16 18 16 19 17 18 18 19 19 17 P 0");

        private final Wireframe wireframe;

        Mesh(String text) {
            this.wireframe = wireframeFromString(text);
        }

        public Wireframe wf() {
            return this.wireframe;
        }

    }

    public static final class Wireframe {

        public static final class Vertex {

            public final int x, y, z;

            Vertex(int x, int y, int z) {
                this.x = x;
                this.y = y;
                this.z = z;
            }
        }

        public static final class Edge {

            public final int a, b;

            Edge(int a, int b) {
                this.a = a;
                this.b = b;
            }
        }

        private final List<Vertex> vertices = new ArrayList<>();
        private final List<Edge> edges = new ArrayList<>();
        private final List<Integer> points = new ArrayList<>();

        public int addVertex(int x, int y, int z) {
            vertices.add(new Vertex(x, y, z));
            return vertices.size() - 1;
        }

        public void addEdge(int a, int b) {
            edges.add(new Edge(a, b));
        }

        public void addPoint(int vi) {
            points.add(vi);
        }

        public boolean validate(StringBuilder outMsg) {
            int n = vertices.size();
            for (Edge e : edges) {
                if (e.a < 0 || e.a >= n || e.b < 0 || e.b >= n) {
                    if (outMsg != null) {
                        outMsg.append("Edge out of range");
                    }
                    return false;
                }
            }
            for (int p : points) {
                if (p < 0 || p >= n) {
                    if (outMsg != null) {
                        outMsg.append("Point out of range");
                    }
                    return false;
                }
            }
            return true;
        }

        public List<Vertex> getVertices() {
            return vertices;
        }

        public List<Edge> getEdges() {
            return edges;
        }

        public List<Integer> getPoints() {
            return points;
        }
    }

    private static Wireframe wireframeFromString(String s) {
        if (s == null) {
            throw new IllegalArgumentException("null wireframe string");
        }
        String[] t = s.trim().split("\\s+");  // split on ANY whitespace
        int i = 0;

        // Header
        if (i >= t.length || !"W1".equals(t[i++])) {
            throw new IllegalArgumentException("Bad header (expected W1)");
        }

        // Vertices
        if (i >= t.length || !"V".equals(t[i++])) {
            throw new IllegalArgumentException("Missing V section");
        }
        int vCount = Integer.parseInt(t[i++]);
        Wireframe wf = new Wireframe();
        for (int k = 0; k < vCount; k++) {
            if (i + 2 >= t.length) {
                throw new IllegalArgumentException("Truncated vertices");
            }
            int x = Integer.parseInt(t[i++]);
            int y = Integer.parseInt(t[i++]);
            int z = Integer.parseInt(t[i++]);
            wf.addVertex(x, y, z);
        }

        // Edges
        if (i >= t.length || !"E".equals(t[i++])) {
            throw new IllegalArgumentException("Missing E section");
        }
        int eCount = Integer.parseInt(t[i++]);
        for (int k = 0; k < eCount; k++) {
            if (i + 1 >= t.length) {
                throw new IllegalArgumentException("Truncated edges");
            }
            int a = Integer.parseInt(t[i++]);
            int b = Integer.parseInt(t[i++]);
            // optional light bounds check; skip invalid
            if (a >= 0 && b >= 0 && a < wf.getVertices().size() && b < wf.getVertices().size()) {
                wf.addEdge(a, b);
            }
        }

        // Points (optional but expected in your writer)
        if (i < t.length) {
            if (!"P".equals(t[i++])) {
                throw new IllegalArgumentException("Missing P section");
            }
            int pCount = Integer.parseInt(t[i++]);
            for (int k = 0; k < pCount; k++) {
                if (i >= t.length) {
                    throw new IllegalArgumentException("Truncated points");
                }
                int pi = Integer.parseInt(t[i++]);
                if (pi >= 0 && pi < wf.getVertices().size()) {
                    wf.addPoint(pi);
                }
            }
        }

        return wf;
    }

    public static Model buildWireframeModel(Wireframe wf, Color color, float unitScale, float pointSize) {

        final List<Wireframe.Vertex> verts = wf.getVertices();

        ModelBuilder mb = new ModelBuilder();
        mb.begin();
        Material mat = new Material(ColorAttribute.createDiffuse(color));
        MeshPartBuilder b = mb.part("wire", GL20.GL_LINES, VertexAttributes.Usage.Position | VertexAttributes.Usage.ColorUnpacked, mat);
        b.setColor(color);

        // Edges → lines
        for (Wireframe.Edge e : wf.getEdges()) {
            if (e.a < 0 || e.a >= verts.size() || e.b < 0 || e.b >= verts.size()) {
                continue;
            }
            Wireframe.Vertex va  = verts.get(e.a);
            Wireframe.Vertex vb = verts.get(e.b);

            TMP1.set(va.x * unitScale, va.y * unitScale, va.z * unitScale);
            TMP2.set(vb.x * unitScale, vb.y * unitScale, vb.z * unitScale);
            b.line(TMP1, TMP2);
        }

        // Points → tiny crosses (3 axes)
        if (pointSize > 0f) {
            float r = pointSize;
            for (int vi : wf.getPoints()) {
                if (vi < 0 || vi >= verts.size()) {
                    continue;
                }
                Wireframe.Vertex v = verts.get(vi);
                float x = v.x * unitScale, y = v.y * unitScale, z = v.z * unitScale;

                // X axis
                TMP1.set(x - r, y, z);
                TMP2.set(x + r, y, z);
                b.line(TMP1, TMP2);

                // Y axis
                TMP3.set(x, y - r, z);
                TMP4.set(x, y + r, z);
                b.line(TMP3, TMP4);

                // Z axis
                TMP5.set(x, y, z - r);
                TMP6.set(x, y, z + r);
                b.line(TMP5, TMP6);
            }
        }

        return mb.end();
    }

    public static GameModelInstance buildWireframeInstance(Wireframe wf, Color color, float unitScale, float pointSize, float x, float y, float z) {
        Model model = buildWireframeModel(wf, color, unitScale, pointSize);
        GameModelInstance instance = new GameModelInstance(model, x, y, z);
        return instance;
    }

}
